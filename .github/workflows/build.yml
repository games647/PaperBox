# Automatically build, run unit and integration tests to detect errors early (CI provided by GitHub)
# including making pull requests review easier

# Human-readable name in the actions tab
name: Java CI

# Build on every pull request regardless of the branch
# Wiki: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # temurin is the successor of adoptjdk
  JDK_DISTRIBUTION: 'temurin'
  JAVA_VERSION: 17

  JIB_VERSION: '0.9.0'
  JIB_CLI_DOWNLOAD: "https://github.com/GoogleContainerTools/jib/releases/download/v${{ env.JIB_VERSION }}-cli/jib-jre-${{ env.JIB_VERSION }}.zip"
  JIB_CHECKSUM: 'c0f47017f1218a223f51228cc69fe9d7793e600d8a05b11e4dbdba0dee6bfc11'

  BASE_IMAGE: 'gcr.io/distroless/java17-debian11:nonroot'

  # https://paper.readthedocs.io/en/latest/server/aikar-flags.html
  AIKAR_FLAGS: '-XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions
  -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M
-XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4
-XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90
-XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem
-XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs
-Daikars.new.flags=true'
  JVM_FLAGS: '${{ env.AIKAR_FLAGS }} -server -XX:+ExitOnOutOfMemoryError'

jobs:
  # job id
  build_and_test:

    # Environment image - always use the newest OS
    runs-on: ubuntu-latest

    # Run steps
    steps:
      - name: Checkout PaperBox
        uses: actions/checkout@v2.4.0

      # Pull changes
      - name: Checkout Paper
        uses: actions/checkout@v2.4.0
        with:
          repository: PaperMC/Paper
          path: Paper
          ref: master

      # Cache only if the action is not run locally using act
      # https://github.com/nektos/act/issues/285#issuecomment-987550101
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        if: ${{ !env.ACT }}
        with:
          distribution: ${{ env.JDK_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      # Setup Java
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        if: ${{ env.ACT }}
        with:
          distribution: ${{ env.JDK_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Download JIB
        run: |
          echo "Downloading JIB-Tool from ""$JIB_CLI_DOWNLOAD"
          wget --timestamping "$JIB_CLI_DOWNLOAD"
          # Security: verify the checksum with a pre-downloaded value to detect arbitary artifact replacement
          # or in transport modifications (MITM)
          echo "$JIB_CHECKSUM" "jib-jre-$JIB_VERSION.zip" | sha256sum --check -

      - name: Patch and build
        run: |
          # Setup names for Git patching
          git config --global user.email "no-reply@github.com"
          git config --global user.name "Github Actions"
          # Change to the submodule folder
          cd Paper
          ./gradlew applyPatches --exclude-task test --exclude-task check --stacktrace
          # Create a full paperclip build
          ./gradlew createReobfPaperclipJar --exclude-task test --exclude-task check --stacktrace
          # stop daemon if both tasks are finished
          ./gradlew --stop

      - name: Extract vars
        run: |
          echo "Extracting versions"
          # Extract the Minecraft version
          echo "MC_VERSION=$(grep --perl-regexp --only-matching '(?<=mcVersion=)[0-9]\.[0-9]{2}(\.[0-9]{1,2})?' Paper/gradle.properties)" >> "$GITHUB_ENV"
          # Extract the Paper source code revision
          echo "REVISION=$(git -C Paper/ rev-parse --short HEAD | grep --extended-regexp "[0-9a-z]{4,56}")" >> "$GITHUB_ENV"
          # Extract the latest digest to include it in the metadata for reproducibility
          # Skopeo enables us to extract the data without pulling the image and having the correct
          # platform/architecture select. JIB will later download the image and uses it's own caching system
          echo "DIGEST=sha256:ded834a82e05408ecc5edac97120f7c48d61e94cb3ec26cc44e8f711d20b00f0" >> "$GITHUB_ENV"
          #echo "DIGEST=$(skopeo inspect docker://""$BASE_IMAGE"" | jq --raw-output '.Digest' | grep --extended-regexp "sha256:[a-z0-9]{64}")" >> "$GITHUB_ENV"

      - name: Import layer layout
        # Use Spring boots layers.idx file to separate libraries, vanilla server, etc manually
        # https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3
        run: |
          jar uf Paper/build/libs/paper-paperclip*.jar BOOT-INF

      - name: Build Container
        # Labels with respect to: https://github.com/opencontainers/image-spec/blob/main/annotations.md
        # Paper is licensed under GPL 3 and MIT but not dual licensed (strictly and not or):
        # https://github.com/PaperMC/Paper/blob/master/LICENSE.md
        run: |
          ./jib-"$JIB_VERSION"/bin/jib jar \
            --from="$BASE_IMAGE@$DIGEST" \
            --environment-variables JDK_JAVA_OPTIONS="$JVM_FLAGS" \
            --expose=25565 \
            --labels=org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --labels=org.opencontainers.image.authors="games647" \
            --labels=org.opencontainers.image.url="https://github.com/games647/PaperBox" \
            --labels=org.opencontainers.image.documentation="https://github.com/games647/PaperBox/blob/main/README.md" \
            --labels=org.opencontainers.image.source="https://github.com/games647/PaperBox" \
            --labels=org.opencontainers.image.version="$MC_VERSION" \
            --labels=org.opencontainers.image.revision="$REVISION" \
            --labels=org.opencontainers.image.vendor="games647" \
            --labels=org.opencontainers.image.license="GPL-3.0-or-later and MIT" \
            --labels=org.opencontainers.image.title="PaperMC Minecraft server" \
            --labels=org.opencontainers.image.description="Paper server implementation of the Minecraft server" \
            --labels=org.opencontainers.image.base.digest="$DIGEST" \
            --labels=org.opencontainers.image.base.name="$BASE_IMAGE" \
            --program-args=--nogui \
            --entrypoint="java -cp /app io.papermc.paperclip.Main" \
            --additional-tags="$MC_VERSION" \
            --target docker://ghcr.io/games647/paperclip Paper/build/libs/paper-paperclip*.jar
